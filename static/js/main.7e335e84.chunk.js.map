{"version":3,"sources":["utils/index.ts","components/select/Select.tsx","components/weather-card/WeatherCard.tsx","images/weatherbg.svg","components/empty-card/EmptyCard.tsx","images/chevronLeft.svg","images/chevronRight.svg","pages/Home/Homepage.tsx","App.tsx","index.tsx"],"names":["City","Coordinates","None","lat","undefined","lon","Samara","Togliatty","Saratov","Kazan","Krasnodar","Select","onChange","useState","value","setValue","event","city","target","className","Object","values","map","index","disabled","WeatherCard","item","width","style","dt","Date","toLocaleDateString","src","weather","length","icon","getSrc","temp","day","toFixed","getTemp","EmptyCard","weatherbg","Homepage","serverdata","setServerData","pastserverdata","setPastServerData","setIndex","window","innerWidth","isMobile","setIsMobile","secondCardDate","setSecondCardDate","secondCardCity","setSecondCardCity","API_KEY","baseUrl","pastUrl","a","url","axios","get","data","daily","Error","message","time","current","alert","updateDeviceState","useEffect","addEventListener","coords","getPastData","removeEventListener","getData","onClick","chevronLeft","max","shouldIndexBeChanged","i","slice","getFormattedList","chevronRight","type","date","setHours","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e335e84.chunk.js","sourcesContent":["export enum City {\n  None = 'Select city',\n  Samara = 'Samara',\n  Togliatty = 'Togliatty',\n  Saratov = 'Saratov',\n  Kazan = 'Kazan',\n  Krasnodar = 'Krasnodar'\n}\n\nexport const Coordinates = {\n  [City.None]: { lat: undefined, lon: undefined },\n  [City.Samara]: { lat: 53.19, lon: 50.10 },\n  [City.Togliatty]: { lat: 53.50, lon: 49.42 },\n  [City.Saratov]: { lat: 51.53, lon: 46.03 },\n  [City.Kazan]: { lat: 55.79, lon: 49.10 },\n  [City.Krasnodar]: { lat: 45.03, lon: 38.97 }\n}\n","import React, { ChangeEvent, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { City } from '../../utils'\r\n\r\nimport './Select.scss'\r\n\r\ntype OnChangeType = (city: City) => void\r\n\r\ninterface ISelectProps {\r\n  onChange: OnChangeType | undefined;\r\n}\r\n\r\nconst Select: React.FC<ISelectProps> = ({\r\n  onChange\r\n}) => {\r\n  const [value, setValue] = useState(City.None)\r\n\r\n  function handleChangeCity (event: ChangeEvent<HTMLSelectElement>): void {\r\n    const city = event.target.value as City\r\n    setValue(city)\r\n    onChange && onChange(city)\r\n  }\r\n\r\n  return (\r\n    <select onChange={handleChangeCity}\r\n            value={value}\r\n            className=\"city-select\"\r\n    >\r\n      {Object.values(City).map((city, index) => <option key={city} className=\"city-select__option\" disabled={!index}>{city}</option>)}\r\n    </select>\r\n  )\r\n}\r\n\r\nSelect.propTypes = {\r\n  onChange: PropTypes.func\r\n}\r\n\r\nexport default Select\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport './WeatherCard.scss'\n\nconst baseIconUrl = 'http://openweathermap.org/img/wn'\n\ninterface IWeatherCardProps {\n  item: any;\n  width?: string\n}\n\nconst WeatherCard: React.FC<IWeatherCardProps> = ({\n  item,\n  width\n}) => {\n  function getDate (): string {\n    return item?.dt ? new Date(item.dt * 1000).toLocaleDateString() : ''\n  }\n  function getTemp (): string {\n    if (item.temp.day) {\n      return item?.temp?.day ? `${(item.temp.day - 273.15).toFixed()}°` : ''\n    }\n    return item?.temp ? `${(item.temp - 273.15).toFixed()}°` : ''\n  }\n  function getSrc (): string {\n    return item?.weather?.length ? `${baseIconUrl}/${item.weather[0].icon}.png` : ''\n  }\n  return (\n    <div className=\"weather-card\"\n         style={{ width: width }}>\n      <div className=\"weather-card__container\">\n        <span className=\"weather-card__date\">{getDate()}</span>\n        <img src={getSrc()} className=\"weather-card__icon\" />\n        <span className=\"weather-card__temp\">{getTemp()}</span>\n      </div>\n    </div>\n  )\n}\n\nWeatherCard.propTypes = {\n  item: PropTypes.any,\n  width: PropTypes.string\n}\n\nexport default WeatherCard\n","export default __webpack_public_path__ + \"static/media/weatherbg.1a743710.svg\";","import React from 'react'\r\n\r\nimport weatherbg from '../../images/weatherbg.svg'\r\nimport './EmptyCard.scss'\r\n\r\nconst EmptyCard: React.FC = () => {\r\n  return (\r\n    <div className=\"bg-content\">\r\n      <img\r\n        className=\"bg-content__img\"\r\n        src={weatherbg}\r\n      />\r\n      <span className=\"bg-content__desc\">Fill in all the fields and the weather will be displayed</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EmptyCard\r\n","export default __webpack_public_path__ + \"static/media/chevronLeft.668da982.svg\";","export default __webpack_public_path__ + \"static/media/chevronRight.d8b7c444.svg\";","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport Select from '../../components/select/Select'\nimport WeatherCard from '../../components/weather-card/WeatherCard'\nimport EmptyCard from '../../components/empty-card/EmptyCard'\nimport { City, Coordinates } from '../../utils'\n\nimport './Homepage.scss'\nimport chevronLeft from '../../images/chevronLeft.svg'\nimport chevronRight from '../../images/chevronRight.svg'\n\nconst Homepage = () => {\n  const [serverdata, setServerData] = useState<Array<any>>([])\n  const [pastserverdata, setPastServerData] = useState<any>()\n  const [index, setIndex] = useState(0)\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 460)\n  const [secondCardDate, setSecondCardDate] = useState<number>(0)\n  const [secondCardCity, setSecondCardCity] = useState<City>(City.None)\n\n  const API_KEY = '7384a8fb7699cee18fbfa10906161e96'\n  const baseUrl = `https://api.openweathermap.org/data/2.5/onecall?&exclude=minutely,hourly,alerts&appid=${API_KEY}`\n  const pastUrl = `https://api.openweathermap.org/data/2.5/onecall/timemachine?&appid=${API_KEY}`\n\n  /**\n   * Function for getting data about weather for a week\n   * @param lat\n   * @param lon\n   */\n  async function getData (lat?: number, lon?: number): Promise<void> {\n    try {\n      const url = `${baseUrl}&lat=${lat}&lon=${lon}`\n      const { data } = (await axios.get(url))\n      setServerData(data.daily)\n    } catch (error) {\n      throw new Error(error.message)\n    }\n  }\n\n  /**\n   * Function for getting data about weather in the 'past'\n   * @param lat\n   * @param lon\n   * @param time\n   */\n  async function getPastData (lat?: number, lon?: number, time?: number): Promise<void> {\n    try {\n      const url = `${pastUrl}&lat=${lat}&lon=${lon}&dt=${time}`\n      const { data } = (await axios.get(url))\n      setPastServerData(data.current)\n    } catch (error) {\n      alert('Выбранная дата не соответствует подписке :)')\n    }\n  }\n\n  /**\n   * Function for changing city in select and showing weather cards\n   * @param city\n   */\n  function handleCityChange (city: City): void {\n    if (!(Coordinates[city].lat || Coordinates[city].lon)) {\n      return\n    }\n    const { lat, lon } = Coordinates[city]\n    getData(lat, lon)\n  }\n\n  const updateDeviceState = () => setIsMobile(window.innerWidth <= 460)\n\n  function getFormattedList (): Array<any> {\n    const max = serverdata.length - 3\n    const shouldIndexBeChanged = !isMobile && max > 0 && index > max\n    const i = shouldIndexBeChanged ? max : index\n    if (shouldIndexBeChanged) {\n      setIndex(max)\n    }\n    return serverdata.slice(i, i + (isMobile ? 1 : 3))\n  }\n\n  function handlePrevClick (): void {\n    if (index > 0) {\n      setIndex(index - 1)\n    }\n  }\n\n  function handleNextClick (): void {\n    const isNextAvailable = index < serverdata.length - (isMobile ? 1 : 3)\n    if (isNextAvailable) {\n      setIndex(index + 1)\n    }\n  }\n\n  /**\n   * Functions for changing date and city in the 'past' block\n   * @param event\n   */\n  function handleChangeSecondCardDate (event: any): void {\n    const date = new Date(event.target.value)\n    date.setHours(12)\n    const timestamp = (+date) / 1000\n    setSecondCardDate(timestamp)\n  }\n\n  const handlePastCityChange = (city: City) => setSecondCardCity(city)\n\n  useEffect(() => {\n    window.addEventListener('resize', updateDeviceState)\n  }, [])\n\n  useEffect(() => {\n    const coords = Coordinates[secondCardCity]\n    if (!(coords.lat || coords.lon) || !secondCardDate) {\n      return\n    }\n    const { lat, lon } = coords\n    getPastData(lat, lon, secondCardDate)\n  }, [secondCardDate, secondCardCity])\n\n  useEffect(() => () => {\n    window.removeEventListener('resize', updateDeviceState)\n  }, [])\n\n  return (\n    <div className=\"homepage\">\n      <div className=\"header\">\n        <span className=\"header__item\">Weather</span>\n        <span className=\"header__item\">forecast</span>\n      </div>\n      <div className=\"cards\">\n        <div className=\"cards__item\">\n          <span className=\"cards__item__title\">7 Days Forecast</span>\n          <Select onChange={handleCityChange} />\n           { serverdata.length\n             ? <div className=\"weather-cards\">\n                 <button className=\"weather-cards__button-arrow\" onClick={handlePrevClick}>\n                   <img src={chevronLeft} />\n                  </button>\n                 <div className=\"weather-cards__container\">\n               { getFormattedList().map(item =>\n                <WeatherCard\n                  width='174px'\n                  key={item.dt}\n                  item={item}\n                />)}\n                </div>\n                <button className=\"weather-cards__button-arrow\" onClick={handleNextClick}>\n                  <img src={chevronRight} />\n                </button>\n            </div>\n             : <EmptyCard />\n           }\n        </div>\n          <div className=\"cards__item\">\n            <span className=\"cards__item__title\">Forecast for a Date in the Past</span>\n              <div className=\"\">\n                <Select onChange={handlePastCityChange} />\n                <input type='date'\n                       className=\"date-input\"\n                       onChange={handleChangeSecondCardDate}\n                />\n              </div>\n                { pastserverdata\n                  ? <div className=\"weather-cards\">\n                     <div className=\"weather-cards__container\">\n                    <WeatherCard\n                      width='100%'\n                      item={pastserverdata}\n                    />\n                    </div>\n                </div>\n                  : <EmptyCard />\n                }\n          </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Homepage\n","import React from 'react'\r\n\r\nimport Homepage from './pages/Home/Homepage'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <Homepage />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nimport './styles'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}